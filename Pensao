<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Gest√£o - Pens√£o</title>
    <!-- √çcone da Aba (Favicon) -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üí∞</text></svg>">
    <!-- Tailwind CSS para estiliza√ß√£o -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Lucide Icons para √≠cones -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Fundo cinza claro */
        }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: all 0.2s ease-in-out;
        }
        .card:hover {
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }
        .btn-primary {
            background-color: #2563eb;
            color: white;
        }
        .btn-primary:hover {
            background-color: #1d4ed8;
        }
        .btn-success {
            background-color: #16a34a;
            color: white;
        }
        .btn-success:hover {
            background-color: #15803d;
        }
        .btn-danger {
            background-color: #dc2626;
            color: white;
        }
        .btn-danger:hover {
            background-color: #b91c1c;
        }
        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }
        .btn-secondary:hover {
            background-color: #4b5563;
        }
        .btn-outline-danger {
            background-color: transparent;
            color: #dc2626;
            border: 1px solid #dc2626;
            padding: 0.25rem 0.5rem;
        }
        .btn-outline-danger:hover {
            background-color: #fef2f2;
        }
        .input-field {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .input-field:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px #bfdbfe;
        }
        @media print {
            body * {
                visibility: hidden;
            }
            #relatorioContainer, #relatorioContainer * {
                visibility: visible;
            }
            #relatorioContainer {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                padding: 1rem;
                border: none;
                box-shadow: none;
            }
            .no-print {
                display: none !important;
            }
        }
    </style>
</head>
<body class="p-4 sm:p-6 lg:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Cabe√ßalho -->
        <header class="mb-8 text-center">
            <h1 class="text-4xl font-bold text-gray-800">Sistema de Gest√£o da Pens√£o</h1>
            <p class="text-lg text-gray-500 mt-2">Gerencie suas vendas e clientes de forma simples e eficaz.</p>
        </header>

        <!-- Container Principal -->
        <main class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            <!-- Coluna da Esquerda: Vendas e Resumo -->
            <div class="flex flex-col gap-8">
                <!-- Card de Registro de Venda -->
                <div class="card">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="shopping-cart"></i>
                        Registrar Nova Venda
                    </h2>
                    <form id="vendaForm" class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="numeroComanda" class="block text-sm font-medium text-gray-600 mb-1">N¬∫ da Comanda</label>
                                <input type="number" id="numeroComanda" class="input-field" placeholder="Ex: 15" required>
                            </div>
                            <div>
                                <label for="valorVenda" class="block text-sm font-medium text-gray-600 mb-1">Valor da Venda (R$)</label>
                                <input type="number" id="valorVenda" step="0.01" class="input-field" placeholder="Ex: 25.50" required>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-600 mb-2">Forma de Pagamento</label>
                            <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Dinheiro" class="hidden" checked>
                                    <i data-lucide="dollar-sign" class="w-5 h-5 mr-2 text-green-600"></i>
                                    <span class="font-medium">Dinheiro</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Cart√£o" class="hidden">
                                    <i data-lucide="credit-card" class="w-5 h-5 mr-2 text-blue-600"></i>
                                    <span class="font-medium">Cart√£o</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Pix" class="hidden">
                                    <i data-lucide="smartphone" class="w-5 h-5 mr-2 text-purple-600"></i>
                                    <span class="font-medium">Pix</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-red-100 has-[:checked]:border-red-400">
                                    <input type="radio" name="tipoPagamento" value="Fiado" class="hidden">
                                    <i data-lucide="book-user" class="w-5 h-5 mr-2 text-red-600"></i>
                                    <span class="font-medium">Fiado</span>
                                </label>
                            </div>
                        </div>
                        <div id="campoClienteFiado" class="hidden">
                            <label for="nomeClienteFiado" class="block text-sm font-medium text-gray-600 mb-1">Nome do Cliente</label>
                            <input type="text" id="nomeClienteFiado" class="input-field" placeholder="Digite o nome completo do cliente">
                        </div>
                        <button type="submit" class="btn btn-primary w-full">
                            <i data-lucide="plus-circle"></i>
                            Adicionar Venda
                        </button>
                    </form>
                </div>

                <!-- Card de Fechamento de Caixa -->
                <div class="card">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="archive"></i>
                        Fechamento do Dia
                    </h2>
                    <div class="space-y-3 text-lg">
                        <div class="flex justify-between items-center font-bold text-blue-600 border-b pb-2">
                            <span>Vendas Totais do Dia:</span>
                            <span id="totalVendasHoje">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="dollar-sign" class="w-4 h-4 inline-block mr-2 text-green-500"></i>Dinheiro:</span>
                            <span id="totalDinheiro">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="credit-card" class="w-4 h-4 inline-block mr-2 text-blue-500"></i>Cart√£o:</span>
                            <span id="totalCartao">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="smartphone" class="w-4 h-4 inline-block mr-2 text-purple-500"></i>Pix:</span>
                            <span id="totalPix">R$ 0,00</span>
                        </div>
                         <div class="flex justify-between items-center text-red-600 font-medium">
                            <span><i data-lucide="book-user" class="w-4 h-4 inline-block mr-2"></i>Fiado do Dia:</span>
                            <span id="totalFiadoHoje">R$ 0,00</span>
                        </div>
                    </div>
                    
                    <div class="mt-4 pt-4 border-t">
                        <h4 class="font-semibold text-gray-600 mb-2">Comandas Registradas Hoje:</h4>
                        <p id="comandasRegistradas" class="text-sm text-gray-500 break-words leading-relaxed">Nenhuma comanda registrada.</p>
                    </div>

                    <!-- Se√ß√£o de Encerramento de Dia -->
                    <div class="mt-6 pt-6 border-t border-dashed">
                         <h3 class="text-lg font-bold text-gray-700 mb-3">Encerrar Expediente</h3>
                         <div>
                            <label for="ultimaComandaInput" class="block text-sm font-medium text-gray-600 mb-1">Informe o n√∫mero da √∫ltima comanda:</label>
                            <input type="number" id="ultimaComandaInput" class="input-field" placeholder="Ex: 15">
                        </div>
                        <button id="resetarDiaBtn" class="btn btn-danger w-full mt-3">
                            <i data-lucide="power-off"></i>
                            Verificar e Encerrar Dia
                        </button>
                    </div>
                </div>
            </div>

            <!-- Coluna da Direita: Vendas, Fiado e Relat√≥rios -->
            <div class="flex flex-col gap-8">
                <!-- Card de Vendas do Dia -->
                <div class="card h-fit">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="clipboard-list"></i>
                        Vendas Registradas no Dia
                    </h2>
                    <div id="listaVendasHoje" class="space-y-2 max-h-60 overflow-y-auto pr-2">
                        <!-- Vendas ser√£o inseridas aqui -->
                        <p class="text-center text-gray-500 py-4">Nenhuma venda registrada ainda.</p>
                    </div>
                </div>

                <!-- Card de Hist√≥rico e Relat√≥rios -->
                <div class="card h-fit no-print">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="history"></i>
                        Hist√≥rico e Relat√≥rios
                    </h2>
                    <div>
                        <label for="seletorData" class="block text-sm font-medium text-gray-600 mb-1">Selecione uma data para ver o relat√≥rio:</label>
                        <select id="seletorData" class="input-field">
                            <option>Nenhum relat√≥rio salvo</option>
                        </select>
                    </div>
                    <div id="relatorioContainer" class="mt-4 border-t pt-4">
                        <!-- Relat√≥rio do dia selecionado ser√° exibido aqui -->
                        <p class="text-center text-gray-500">Selecione uma data para come√ßar.</p>
                    </div>
                    
                    <!-- NOVOS BOT√ïES DE BACKUP -->
                    <div class="mt-6 pt-6 border-t border-dashed space-y-3">
                        <h3 class="text-lg font-bold text-gray-700">Backup e Restaura√ß√£o</h3>
                        <p class="text-sm text-gray-500">Salve seus dados (hist√≥rico e fiado) em um arquivo seguro no seu computador.</p>
                        <button id="exportarDadosBtn" class="btn btn-success w-full">
                            <i data-lucide="download"></i>
                            Exportar Backup Completo
                        </button>
                        <button id="importarBtn" class="btn btn-secondary w-full">
                            <i data-lucide="upload"></i>
                            Importar Backup
                        </button>
                        <input type="file" id="importarDadosInput" class="hidden" accept="application/json">
                    </div>
                </div>

                <!-- Card de Gest√£o de Fiado -->
                <div class="card h-fit">
                    <h2 class="text-2xl font-bold text-gray-700 mb-2 flex items-center gap-2">
                        <i data-lucide="users"></i>
                        Gest√£o de Fiado
                    </h2>
                    <div class="flex justify-between items-center bg-red-100 p-3 rounded-lg mb-4">
                        <span class="font-bold text-red-700">VALOR TOTAL EM ABERTO:</span>
                        <span id="totalFiadoGeral" class="text-xl font-bold text-red-700">R$ 0,00</span>
                    </div>
                    <div id="listaClientesFiado" class="space-y-4">
                        <p class="text-center text-gray-500 py-4">Nenhum cliente com d√©bito no momento.</p>
                    </div>
                </div>
            </div>
        </main>

    </div>

    <!-- Modal de Senha -->
    <div id="senhaModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-full max-w-sm shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                    <i data-lucide="shield-alert" class="h-6 w-6 text-yellow-600"></i>
                </div>
                <h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">Aten√ß√£o!</h3>
                <div class="mt-2 px-2 py-3">
                    <p id="senhaModalMensagem" class="text-sm text-gray-500 mb-4">Uma ou mais comandas est√£o faltando. Digite a senha de administrador para for√ßar o encerramento.</p>
                    <input type="password" id="senhaInput" class="input-field" placeholder="Digite a senha">
                </div>
                <div class="items-center px-4 py-3 gap-2 flex">
                    <button id="cancelarSenhaBtn" class="btn bg-gray-200 text-gray-800 hover:bg-gray-300 w-full">Cancelar</button>
                    <button id="confirmarSenhaBtn" class="btn btn-danger w-full">Confirmar Encerramento</button>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // Inicializa os √≠cones
        lucide.createIcons();

        // Elementos da UI
        const vendaForm = document.getElementById('vendaForm');
        const valorVendaInput = document.getElementById('valorVenda');
        const numeroComandaInput = document.getElementById('numeroComanda');
        const tipoPagamentoRadios = document.querySelectorAll('input[name="tipoPagamento"]');
        const campoClienteFiado = document.getElementById('campoClienteFiado');
        const nomeClienteFiadoInput = document.getElementById('nomeClienteFiado');
        const resetarDiaBtn = document.getElementById('resetarDiaBtn');
        const ultimaComandaInput = document.getElementById('ultimaComandaInput');
        
        // Displays de resumo
        const totalVendasHojeEl = document.getElementById('totalVendasHoje');
        const totalDinheiroEl = document.getElementById('totalDinheiro');
        const totalCartaoEl = document.getElementById('totalCartao');
        const totalPixEl = document.getElementById('totalPix');
        const totalFiadoHojeEl = document.getElementById('totalFiadoHoje');
        
        // Se√ß√£o de Fiado
        const listaClientesFiadoEl = document.getElementById('listaClientesFiado');
        const totalFiadoGeralEl = document.getElementById('totalFiadoGeral');

        // Se√ß√£o de Vendas do Dia
        const listaVendasHojeEl = document.getElementById('listaVendasHoje');
        const comandasRegistradasEl = document.getElementById('comandasRegistradas');


        // Se√ß√£o de Hist√≥rico e Backup
        const seletorData = document.getElementById('seletorData');
        const relatorioContainer = document.getElementById('relatorioContainer');
        const exportarDadosBtn = document.getElementById('exportarDadosBtn');
        const importarBtn = document.getElementById('importarBtn');
        const importarDadosInput = document.getElementById('importarDadosInput');


        // Modal de Senha
        const senhaModal = document.getElementById('senhaModal');
        const senhaModalMensagem = document.getElementById('senhaModalMensagem');
        const senhaInput = document.getElementById('senhaInput');
        const cancelarSenhaBtn = document.getElementById('cancelarSenhaBtn');
        const confirmarSenhaBtn = document.getElementById('confirmarSenhaBtn');

        // --- L√ìGICA DE DADOS ---
        const SENHA_ADMIN = 'admin123';

        // Carrega os dados do localStorage ou inicializa com valores padr√£o
        let vendasHoje = JSON.parse(localStorage.getItem('vendasHoje')) || [];
        let clientesFiado = JSON.parse(localStorage.getItem('clientesFiado')) || {};
        let comandasHoje = JSON.parse(localStorage.getItem('comandasHoje')) || [];
        let historicoVendas = JSON.parse(localStorage.getItem('historicoVendas')) || {};

        // Fun√ß√µes de formata√ß√£o e salvamento
        const formatarMoeda = (valor) => valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        const formatarData = (isoString) => new Date(isoString).toLocaleDateString('pt-BR');

        const salvarDados = () => {
            localStorage.setItem('vendasHoje', JSON.stringify(vendasHoje));
            localStorage.setItem('clientesFiado', JSON.stringify(clientesFiado));
            localStorage.setItem('comandasHoje', JSON.stringify(comandasHoje));
            localStorage.setItem('historicoVendas', JSON.stringify(historicoVendas));
        };
        
        const arquivarVendasDoDia = () => {
            if (vendasHoje.length === 0) return;
            
            const hoje = new Date();
            const chaveData = `${hoje.getFullYear()}-${String(hoje.getMonth() + 1).padStart(2, '0')}-${String(hoje.getDate()).padStart(2, '0')}`;
            
            const totais = vendasHoje.reduce((acc, venda) => {
                acc[venda.tipo] = (acc[venda.tipo] || 0) + venda.valor;
                return acc;
            }, { 'Dinheiro': 0, 'Cart√£o': 0, 'Pix': 0, 'Fiado': 0 });

            const totalVendas = totais.Dinheiro + totais.Cart√£o + totais.Pix + totais.Fiado;
            
            historicoVendas[chaveData] = {
                data: hoje.toISOString(),
                resumo: { ...totais, total: totalVendas },
                vendas: [...vendasHoje],
                ultimaComanda: parseInt(ultimaComandaInput.value) || Math.max(...comandasHoje)
            };
        };

        const resetarDadosDoDia = () => {
            arquivarVendasDoDia();
            vendasHoje = [];
            comandasHoje = [];
            ultimaComandaInput.value = '';
            salvarDados();
            atualizarUI();
            alert('Dia encerrado e arquivado com sucesso! Novo dia iniciado.');
        }

        // --- L√ìGICA DE RENDERIZA√á√ÉO ---
        
        const renderizarResumoDiario = () => {
            const totais = vendasHoje.reduce((acc, venda) => {
                acc[venda.tipo] = (acc[venda.tipo] || 0) + venda.valor;
                return acc;
            }, { 'Dinheiro': 0, 'Cart√£o': 0, 'Pix': 0, 'Fiado': 0 });

            const totalVendas = totais.Dinheiro + totais.Cart√£o + totais.Pix + totais.Fiado;

            totalVendasHojeEl.textContent = formatarMoeda(totalVendas);
            totalDinheiroEl.textContent = formatarMoeda(totais.Dinheiro);
            totalCartaoEl.textContent = formatarMoeda(totais.Cart√£o);
            totalPixEl.textContent = formatarMoeda(totais.Pix);
            totalFiadoHojeEl.textContent = formatarMoeda(totais.Fiado);
        };

        const renderizarClientesFiado = () => {
            listaClientesFiadoEl.innerHTML = '';
            const nomesClientes = Object.keys(clientesFiado);
            let totalGeral = 0;

            if (nomesClientes.length === 0) {
                listaClientesFiadoEl.innerHTML = '<p class="text-center text-gray-500 py-4">Nenhum cliente com d√©bito no momento.</p>';
                totalFiadoGeralEl.textContent = formatarMoeda(0);
                return;
            }

            nomesClientes.sort().forEach(nome => {
                const divida = clientesFiado[nome];
                totalGeral += divida;
                const clienteDiv = document.createElement('div');
                clienteDiv.className = 'border rounded-lg p-4 space-y-3';
                clienteDiv.innerHTML = `
                    <div class="flex justify-between items-center">
                        <p class="text-lg font-semibold text-gray-800">${nome}</p>
                        <p class="text-lg font-bold text-red-600">${formatarMoeda(divida)}</p>
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="number" step="0.01" class="input-field flex-grow" placeholder="Valor do pagamento">
                        <button class="btn btn-primary text-sm flex-shrink-0 pagar-fiado-btn" data-cliente="${nome}"><i data-lucide="check" class="w-4 h-4"></i>Pagar/Amortizar</button>
                        <button class="btn btn-danger text-sm flex-shrink-0 remover-cliente-btn" data-cliente="${nome}"><i data-lucide="trash-2" class="w-4 h-4"></i>Quitar e Remover</button>
                    </div>`;
                listaClientesFiadoEl.appendChild(clienteDiv);
            });
            
            totalFiadoGeralEl.textContent = formatarMoeda(totalGeral);
        };

        const renderizarVendasDoDia = () => {
            listaVendasHojeEl.innerHTML = '';
            comandasRegistradasEl.textContent = comandasHoje.length > 0 ? [...comandasHoje].sort((a, b) => a - b).join(', ') : 'Nenhuma comanda registrada.';

            if (vendasHoje.length === 0) {
                listaVendasHojeEl.innerHTML = '<p class="text-center text-gray-500 py-4">Nenhuma venda registrada ainda.</p>';
                return;
            }

            [...vendasHoje].sort((a, b) => a.comanda - b.comanda).forEach(venda => {
                const originalIndex = vendasHoje.findIndex(v => v.data === venda.data && v.comanda === venda.comanda);
                const vendaDiv = document.createElement('div');
                vendaDiv.className = 'flex justify-between items-center p-2 rounded-md even:bg-gray-50';
                
                let tipoPagamentoIcon = '';
                switch(venda.tipo) {
                    case 'Dinheiro': tipoPagamentoIcon = '<i data-lucide="dollar-sign" class="w-4 h-4 text-green-600"></i>'; break;
                    case 'Cart√£o': tipoPagamentoIcon = '<i data-lucide="credit-card" class="w-4 h-4 text-blue-600"></i>'; break;
                    case 'Pix': tipoPagamentoIcon = '<i data-lucide="smartphone" class="w-4 h-4 text-purple-600"></i>'; break;
                    case 'Fiado': tipoPagamentoIcon = '<i data-lucide="book-user" class="w-4 h-4 text-red-600"></i>'; break;
                }

                vendaDiv.innerHTML = `
                    <div class="flex items-center gap-3">
                        <span class="font-bold text-gray-700 w-10 text-center">${venda.comanda}</span>
                        <span class="font-semibold text-gray-800">${formatarMoeda(venda.valor)}</span>
                        <span class="flex items-center gap-1 text-sm text-gray-500">${tipoPagamentoIcon} ${venda.tipo}</span>
                    </div>
                    <button class="btn btn-outline-danger text-xs remover-venda-btn" data-venda-index="${originalIndex}"><i data-lucide="trash-2" class="w-3 h-3"></i>Remover</button>`;
                listaVendasHojeEl.appendChild(vendaDiv);
            });
        };

        const renderizarSeletorHistorico = () => {
            seletorData.innerHTML = '';
            const datasSalvas = Object.keys(historicoVendas).sort().reverse();

            if (datasSalvas.length === 0) {
                seletorData.innerHTML = '<option>Nenhum relat√≥rio salvo</option>';
                relatorioContainer.innerHTML = '<p class="text-center text-gray-500">Selecione uma data para come√ßar.</p>';
                return;
            }

            seletorData.innerHTML = '<option value="">Selecione uma data</option>';
            datasSalvas.forEach(dataKey => {
                const option = document.createElement('option');
                option.value = dataKey;
                option.textContent = formatarData(historicoVendas[dataKey].data);
                seletorData.appendChild(option);
            });
        };

        const mostrarRelatorio = (dataKey) => {
            if (!dataKey || !historicoVendas[dataKey]) {
                relatorioContainer.innerHTML = '<p class="text-center text-gray-500">Selecione uma data para come√ßar.</p>';
                return;
            }

            const relatorio = historicoVendas[dataKey];
            const { resumo, vendas } = relatorio;
            
            let vendasHtml = vendas.sort((a,b) => a.comanda - b.comanda).map(venda => `
                <li class="flex justify-between items-center p-2 even:bg-gray-50">
                    <span>Comanda <strong>#${venda.comanda}</strong></span>
                    <span class="font-semibold">${formatarMoeda(venda.valor)}</span>
                    <span class="text-sm text-gray-600">${venda.tipo} ${venda.cliente ? `(${venda.cliente})` : ''}</span>
                </li>
            `).join('');

            relatorioContainer.innerHTML = `
                <div class="space-y-3">
                    <h3 class="text-xl font-bold text-gray-800">Relat√≥rio de ${formatarData(relatorio.data)}</h3>
                    <div class="space-y-2 border-t pt-2">
                        <div class="flex justify-between font-bold text-blue-600"><p>Venda Total:</p><p>${formatarMoeda(resumo.total)}</p></div>
                        <div class="flex justify-between text-sm"><p>Dinheiro:</p><p>${formatarMoeda(resumo.Dinheiro)}</p></div>
                        <div class="flex justify-between text-sm"><p>Cart√£o:</p><p>${formatarMoeda(resumo.Cart√£o)}</p></div>
                        <div class="flex justify-between text-sm"><p>Pix:</p><p>${formatarMoeda(resumo.Pix)}</p></div>
                        <div class="flex justify-between text-sm text-red-600"><p>Fiado:</p><p>${formatarMoeda(resumo.Fiado)}</p></div>
                    </div>
                    <div class="border-t pt-2">
                        <h4 class="font-semibold mb-2">Detalhes das Vendas (${vendas.length} registros):</h4>
                        <ul class="space-y-1 max-h-60 overflow-y-auto pr-2">${vendasHtml}</ul>
                    </div>
                    <button id="imprimirBtn" class="btn btn-success w-full mt-4 no-print"><i data-lucide="printer"></i>Imprimir Relat√≥rio</button>
                </div>
            `;
            lucide.createIcons();
        };

        const atualizarUI = () => {
            renderizarResumoDiario();
            renderizarClientesFiado();
            renderizarVendasDoDia();
            renderizarSeletorHistorico();
            lucide.createIcons();
        };

        // --- L√ìGICA DE EVENTOS ---
        
        vendaForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const valor = parseFloat(valorVendaInput.value);
            const numeroComanda = parseInt(numeroComandaInput.value);
            const tipoPagamento = document.querySelector('input[name="tipoPagamento"]:checked').value;

            if (isNaN(valor) || valor <= 0) { alert('Por favor, insira um valor de venda v√°lido.'); return; }
            if (isNaN(numeroComanda) || numeroComanda <= 0) { alert('Por favor, insira um n√∫mero de comanda v√°lido.'); return; }
            if(comandasHoje.includes(numeroComanda)) { alert(`A comanda de n√∫mero ${numeroComanda} j√° foi registrada hoje.`); return; }

            const novaVenda = { comanda: numeroComanda, valor, tipo: tipoPagamento, data: new Date().toISOString() };

            if (tipoPagamento === 'Fiado') {
                const nomeCliente = nomeClienteFiadoInput.value.trim();
                if (!nomeCliente) { alert('Por favor, insira o nome do cliente para a venda fiado.'); return; }
                novaVenda.cliente = nomeCliente;
                clientesFiado[nomeCliente] = (clientesFiado[nomeCliente] || 0) + valor;
            }
            
            vendasHoje.push(novaVenda);
            comandasHoje.push(numeroComanda);
            salvarDados();
            atualizarUI();

            vendaForm.reset();
            campoClienteFiado.classList.add('hidden');
            nomeClienteFiadoInput.required = false;
            numeroComandaInput.focus();
        });
        
        tipoPagamentoRadios.forEach(radio => radio.addEventListener('change', () => {
            campoClienteFiado.classList.toggle('hidden', radio.value !== 'Fiado');
            nomeClienteFiadoInput.required = radio.value === 'Fiado';
        }));

        listaClientesFiadoEl.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;
            const cliente = target.dataset.cliente;

            if (target.classList.contains('pagar-fiado-btn')) {
                const inputValor = target.parentElement.querySelector('input');
                const valorPago = parseFloat(inputValor.value);
                if (isNaN(valorPago) || valorPago <= 0) { alert('Valor de pagamento inv√°lido.'); return; }
                clientesFiado[cliente] -= valorPago;
                if (clientesFiado[cliente] < 0.01) delete clientesFiado[cliente];
                salvarDados();
                atualizarUI();
            } else if (target.classList.contains('remover-cliente-btn')) {
                if (confirm(`Tem certeza que deseja quitar e remover "${cliente}"?`)) {
                    delete clientesFiado[cliente];
                    salvarDados();
                    atualizarUI();
                }
            }
        });

        listaVendasHojeEl.addEventListener('click', (e) => {
            const target = e.target.closest('.remover-venda-btn');
            if (!target) return;

            const index = parseInt(target.dataset.vendaIndex);
            const vendaParaRemover = vendasHoje[index];

            if (confirm(`Remover a venda da comanda N¬∫ ${vendaParaRemover.comanda}?`)) {
                if (vendaParaRemover.tipo === 'Fiado' && vendaParaRemover.cliente) {
                    const cliente = vendaParaRemover.cliente;
                    if (clientesFiado[cliente]) {
                        clientesFiado[cliente] -= vendaParaRemover.valor;
                        if (clientesFiado[cliente] < 0.01) delete clientesFiado[cliente];
                    }
                }
                comandasHoje = comandasHoje.filter(c => c !== vendaParaRemover.comanda);
                vendasHoje.splice(index, 1);
                salvarDados();
                atualizarUI();
            }
        });
        
        seletorData.addEventListener('change', (e) => mostrarRelatorio(e.target.value));

        relatorioContainer.addEventListener('click', (e) => {
            if (e.target.id === 'imprimirBtn') window.print();
        });

        resetarDiaBtn.addEventListener('click', () => {
            if (vendasHoje.length === 0) {
                if(confirm('Nenhuma venda registrada. Deseja iniciar um novo dia mesmo assim?')) resetarDadosDoDia();
                return;
            }
            const ultimaComandaInformada = parseInt(ultimaComandaInput.value);
            if (isNaN(ultimaComandaInformada) || ultimaComandaInformada <= 0) {
                alert('Informe o n√∫mero da √∫ltima comanda do dia.');
                ultimaComandaInput.focus();
                return;
            }
            const maxComandaRegistrada = comandasHoje.length > 0 ? Math.max(...comandasHoje) : 0;
            if(ultimaComandaInformada < maxComandaRegistrada) {
                alert(`A √∫ltima comanda (${ultimaComandaInformada}) n√£o pode ser menor que a maior j√° registrada (${maxComandaRegistrada}).`);
                ultimaComandaInput.focus();
                return;
            }
            const comandasFaltantes = [];
            for (let i = 1; i <= ultimaComandaInformada; i++) {
                if (!comandasHoje.includes(i)) comandasFaltantes.push(i);
            }
            if (comandasFaltantes.length > 0) {
                senhaModalMensagem.textContent = `Faltando comandas: ${comandasFaltantes.join(', ')}. Digite a senha para for√ßar o encerramento.`;
                senhaModal.classList.remove('hidden');
                senhaInput.focus();
            } else {
                if(confirm('Todas as comandas est√£o em ordem. Deseja encerrar e arquivar o dia?')) resetarDadosDoDia();
            }
        });
        
        cancelarSenhaBtn.addEventListener('click', () => senhaModal.classList.add('hidden'));
        confirmarSenhaBtn.addEventListener('click', () => {
            if (senhaInput.value === SENHA_ADMIN) {
                senhaModal.classList.add('hidden');
                senhaInput.value = '';
                resetarDadosDoDia();
            } else {
                alert('Senha incorreta!');
            }
        });
        
        // --- NOVOS EVENTOS DE BACKUP ---
        
        exportarDadosBtn.addEventListener('click', () => {
            const backupData = {
                historico: historicoVendas,
                fiado: clientesFiado
            };
            
            if (Object.keys(historicoVendas).length === 0 && Object.keys(clientesFiado).length === 0) {
                alert('N√£o h√° dados para exportar.');
                return;
            }
            
            const dataStr = JSON.stringify(backupData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = 'backup_pensao_completo.json';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            alert('Backup exportado com sucesso!');
        });
        
        importarBtn.addEventListener('click', () => {
            // Aciona o input de arquivo oculto
            importarDadosInput.click();
        });

        importarDadosInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const dadosImportados = JSON.parse(event.target.result);
                    
                    // Valida√ß√£o simples para ver se o arquivo parece correto
                    if (dadosImportados && typeof dadosImportados === 'object' && dadosImportados.hasOwnProperty('historico') && dadosImportados.hasOwnProperty('fiado')) {
                        if (confirm('Deseja substituir o hist√≥rico e a lista de fiado por este backup? (Os dados do dia atual n√£o ser√£o afetados)')) {
                            historicoVendas = dadosImportados.historico || {};
                            clientesFiado = dadosImportados.fiado || {};
                            salvarDados();
                            atualizarUI();
                            alert('Backup importado com sucesso!');
                        }
                    } else {
                        alert('Arquivo de backup inv√°lido ou corrompido.');
                    }
                } catch (error) {
                    console.error('Erro ao importar backup:', error);
                    alert('Ocorreu um erro ao ler o arquivo de backup.');
                } finally {
                    // Reseta o input para permitir importar o mesmo arquivo novamente
                    e.target.value = null;
                }
            };
            reader.readAsText(file);
        });

        // Inicializa√ß√£o da aplica√ß√£o
        document.addEventListener('DOMContentLoaded', atualizarUI);
    </script>

</body>
</html>

