<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Gest√£o - Pens√£o</title>
    <!-- √çcone da Aba (Favicon) -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üí∞</text></svg>">
    <!-- Tailwind CSS para estiliza√ß√£o -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Lucide Icons para √≠cones -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Fundo cinza claro */
        }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: all 0.2s ease-in-out;
        }
        .card:hover {
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }
        .btn-primary {
            background-color: #2563eb;
            color: white;
        }
        .btn-primary:hover {
            background-color: #1d4ed8;
        }
        .btn-success {
            background-color: #16a34a;
            color: white;
        }
        .btn-success:hover {
            background-color: #15803d;
        }
        .btn-danger {
            background-color: #dc2626;
            color: white;
        }
        .btn-danger:hover {
            background-color: #b91c1c;
        }
        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }
        .btn-secondary:hover {
            background-color: #4b5563;
        }
        .btn-outline-danger {
            background-color: transparent;
            color: #dc2626;
            border: 1px solid #dc2626;
            padding: 0.25rem 0.5rem;
        }
        .btn-outline-danger:hover {
            background-color: #fef2f2;
        }
        /* NOVO BOT√ÉO DE HIST√ìRICO */
        .btn-outline-secondary {
            background-color: transparent;
            color: #4b5563;
            border: 1px solid #9ca3af;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem; /* 12px */
            line-height: 1rem; /* 16px */
        }
        .btn-outline-secondary:hover {
            background-color: #f3f4f6;
        }
        .input-field {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .input-field:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px #bfdbfe;
        }
        /* Estilo para Modal gen√©rico */
        .modal {
            display: none; /* Oculto por padr√£o */
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border-radius: 0.75rem;
            width: 90%;
            max-width: 600px; /* Modal de hist√≥rico pode ser maior */
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        }
        .modal-close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }
        @media print {
            body * {
                visibility: hidden;
            }
            #relatorioContainer, #relatorioContainer * {
                visibility: visible;
            }
            #relatorioContainer {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                padding: 1rem;
                border: none;
                box-shadow: none;
            }
            .no-print {
                display: none !important;
            }
        }
    </style>
</head>
<body class="p-4 sm:p-6 lg:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Cabe√ßalho -->
        <header class="mb-8 text-center">
            <h1 class="text-4xl font-bold text-gray-800">Sistema de Gest√£o da Pens√£o</h1>
            <p class="text-lg text-gray-500 mt-2">Gerencie suas vendas e clientes de forma simples e eficaz.</p>
        </header>

        <!-- Container Principal -->
        <main class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            <!-- Coluna da Esquerda: Vendas e Resumo -->
            <div class="flex flex-col gap-8">
                <!-- Card de Registro de Venda -->
                <div class="card">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="shopping-cart"></i>
                        Registrar Nova Venda
                    </h2>
                    <form id="vendaForm" class="space-y-4">
                        <!-- CAMPOS DA COMANDA ATUALIZADOS -->
                        <div class="grid grid-cols-3 gap-4">
                            <div>
                                <label for="tipoComanda" class="block text-sm font-medium text-gray-600 mb-1">Tipo</label>
                                <select id="tipoComanda" class="input-field">
                                    <option value="A">Amarela (A)</option>
                                    <option value="B">Branca (B)</option>
                                </select>
                            </div>
                            <div>
                                <label for="numeroComanda" class="block text-sm font-medium text-gray-600 mb-1">N¬∫</label>
                                <input type="number" id="numeroComanda" class="input-field" placeholder="Ex: 15" required>
                            </div>
                            <div>
                                <label for="valorVenda" class="block text-sm font-medium text-gray-600 mb-1">Valor (R$)</label>
                                <input type="number" id="valorVenda" step="0.01" class="input-field" placeholder="Ex: 25.50" required>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-600 mb-2">Forma de Pagamento</label>
                            <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Dinheiro" class="hidden" checked>
                                    <i data-lucide="dollar-sign" class="w-5 h-5 mr-2 text-green-600"></i>
                                    <span class="font-medium">Dinheiro</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Cart√£o" class="hidden">
                                    <i data-lucide="credit-card" class="w-5 h-5 mr-2 text-blue-600"></i>
                                    <span class="font-medium">Cart√£o</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-blue-100 has-[:checked]:border-blue-400">
                                    <input type="radio" name="tipoPagamento" value="Pix" class="hidden">
                                    <i data-lucide="smartphone" class="w-5 h-5 mr-2 text-purple-600"></i>
                                    <span class="font-medium">Pix</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-blue-50 has-[:checked]:bg-red-100 has-[:checked]:border-red-400">
                                    <input type="radio" name="tipoPagamento" value="Fiado" class="hidden">
                                    <i data-lucide="book-user" class="w-5 h-5 mr-2 text-red-600"></i>
                                    <span class="font-medium">Fiado</span>
                                </label>
                            </div>
                        </div>
                        <!-- CAMPO FIADO ATUALIZADO COM TELEFONE OBRIGAT√ìRIO -->
                        <div id="campoClienteFiado" class="hidden space-y-3">
                            <div>
                                <label for="telefoneClienteFiado" class="block text-sm font-medium text-gray-600 mb-1">Telefone do Cliente (Obrigat√≥rio)</label>
                                <input type="tel" id="telefoneClienteFiado" class="input-field" placeholder="(21) 99999-8888">
                            </div>
                            <div>
                                <label for="nomeClienteFiado" class="block text-sm font-medium text-gray-600 mb-1">Nome do Cliente (Opcional)</label>
                                <input type="text" id="nomeClienteFiado" class="input-field" placeholder="Digite o nome (opcional)">
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary w-full">
                            <i data-lucide="plus-circle"></i>
                            Adicionar Venda
                        </button>
                    </form>
                </div>

                <!-- Card de Fechamento de Caixa -->
                <div class="card">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="archive"></i>
                        Fechamento do Dia
                    </h2>
                    <div class="space-y-3 text-lg">
                        <div class="flex justify-between items-center font-bold text-blue-600 border-b pb-2">
                            <span>Vendas Totais do Dia:</span>
                            <span id="totalVendasHoje">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="dollar-sign" class="w-4 h-4 inline-block mr-2 text-green-500"></i>Dinheiro:</span>
                            <span id="totalDinheiro">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="credit-card" class="w-4 h-4 inline-block mr-2 text-blue-500"></i>Cart√£o:</span>
                            <span id="totalCartao">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-gray-600">
                            <span><i data-lucide="smartphone" class="w-4 h-4 inline-block mr-2 text-purple-500"></i>Pix:</span>
                            <span id="totalPix">R$ 0,00</span>
                        </div>
                         <div class="flex justify-between items-center text-red-600 font-medium">
                            <span><i data-lucide="book-user" class="w-4 h-4 inline-block mr-2"></i>Fiado do Dia:</span>
                            <span id="totalFiadoHoje">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center text-green-600 font-medium">
                            <span><i data-lucide="piggy-bank" class="w-4 h-4 inline-block mr-2"></i>Pagamentos Fiado Recebidos:</span>
                            <span id="totalPagamentosFiadoHoje">R$ 0,00</span>
                        </div>
                    </div>

                    <!-- CAMPO DE PREVIS√ÉO ATUALIZADO -->
                    <div class="mt-4 pt-4 border-t border-dashed">
                        <h3 class="text-lg font-semibold text-gray-700 mb-2">Previs√£o do Caixa (Dinheiro)</h3>
                        <div class="bg-blue-50 p-4 rounded-lg text-center">
                            <p class="text-sm text-blue-700">Valor Inicial (Troco) + Vendas em Dinheiro + Pagamentos de Fiado</p>
                            <p id="totalCaixaDinheiro" class="text-3xl font-bold text-blue-900 mt-2">R$ 0,00</p>
                            <p class="text-xs text-gray-500 mt-2">Confira este valor com o dinheiro f√≠sico na sua gaveta.</p>
                        </div>
                    </div>
                    
                    <div class="mt-4 pt-4 border-t">
                        <h4 class="font-semibold text-gray-600 mb-2">Comandas Registradas Hoje:</h4>
                        <p id="comandasRegistradas" class="text-sm text-gray-500 break-words leading-relaxed">Nenhuma comanda registrada.</p>
                    </div>
                </div>

                <!-- NOVO: Card de Configura√ß√£o e Encerramento -->
                <div class="card">
                    <h2 class="text-2xl font-bold text-gray-700 mb-3 flex items-center gap-2">
                        <i data-lucide="settings-2"></i>
                        Configurar e Encerrar Dia
                    </h2>
                    <p class="text-sm text-gray-500 mb-4">Defina o valor inicial do caixa e a **quantidade total** de comandas que ser√£o usadas no dia.</p>
                    
                    <div class="mb-3">
                        <label for="trocoInicialInput" class="block text-sm font-medium text-gray-600 mb-1">Valor Inicial do Caixa (Troco)</label>
                        <input type="number" step="0.01" id="trocoInicialInput" class="input-field" placeholder="Ex: 50.00">
                    </div>

                     <div class="grid grid-cols-2 gap-4">
                        <div>
                           <label for="ultimaComandaA" class="block text-sm font-medium text-gray-600 mb-1">Total de Amarelas (A)</label>
                           <input type="number" id="ultimaComandaA" class="input-field" placeholder="Ex: 50">
                       </div>
                        <div>
                           <label for="ultimaComandaB" class="block text-sm font-medium text-gray-600 mb-1">Total de Brancas (B)</label>
                           <input type="number" id="ultimaComandaB" class="input-field" placeholder="Ex: 100">
                       </div>
                   </div>
                    <button id="salvarConfigComandasBtn" class="btn btn-primary w-full mt-3"><i data-lucide="save"></i> Salvar Totais e Troco do Dia</button>
                    <div class="mt-4 pt-4 border-t border-dashed">
                        <button id="resetarDiaBtn" class="btn btn-danger w-full mt-3">
                            <i data-lucide="power-off"></i>
                            Verificar e Encerrar Dia
                        </button>
                    </div>
                </div>

            </div>

            <!-- Coluna da Direita: Vendas, Fiado e Relat√≥rios -->
            <div class="flex flex-col gap-8">
                <!-- Card de Vendas do Dia -->
                <div class="card h-fit">
                    <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                        <i data-lucide="clipboard-list"></i>
                        Vendas Registradas no Dia
                    </h2>
                    <div id="listaVendasHoje" class="space-y-2 max-h-60 overflow-y-auto pr-2">
                        <!-- Vendas ser√£o inseridas aqui -->
                        <p class="text-center text-gray-500 py-4">Nenhuma venda registrada ainda.</p>
                    </div>
                </div>

                <!-- Card de Gest√£o de Fiado -->
                <div class="card h-fit">
                    <h2 class="text-2xl font-bold text-gray-700 mb-2 flex items-center gap-2">
                        <i data-lucide="users"></i>
                        Gest√£o de Fiado
                    </h2>
                    <div class="flex justify-between items-center bg-red-100 p-3 rounded-lg mb-4">
                        <span class="font-bold text-red-700">VALOR TOTAL EM ABERTO:</span>
                        <span id="totalFiadoGeral" class="text-xl font-bold text-red-700">R$ 0,00</span>
                    </div>
                    <div id="listaClientesFiado" class="space-y-4">
                        <p class="text-center text-gray-500 py-4">Nenhum cliente com d√©bito no momento.</p>
                    </div>
                </div>

                <!-- Card de Hist√≥rico e Relat√≥rios -->
                <div class="card h-fit">
                    <div class="no-print"> 
                        <h2 class="text-2xl font-bold text-gray-700 mb-4 flex items-center gap-2">
                            <i data-lucide="history"></i>
                            Hist√≥rico e Relat√≥rios
                        </h2>
                        
                        <div>
                            <label for="seletorData" class="block text-sm font-medium text-gray-600 mb-1">Relat√≥rio Di√°rio (Selecione uma data):</label>
                            <select id="seletorData" class="input-field">
                                <option>Nenhum relat√≥rio salvo</option>
                            </select>
                        </div>
                    </div>

                    <!-- Este container ser√° impresso -->
                    <div id="relatorioContainer" class="mt-4 border-t pt-4">
                        <p class="text-center text-gray-500 no-print">Selecione uma data para come√ßar.</p>
                    </div>
                    
                    <div class="mt-6 pt-6 border-t border-dashed space-y-3 no-print">
                        <h3 class="text-lg font-bold text-gray-700">Backup e Restaura√ß√£o</h3>
                        <p class="text-sm text-gray-500">Salve seus dados (hist√≥rico e fiado) em um arquivo seguro no seu computador.</p>
                        <button id="exportarDadosBtn" class="btn btn-success w-full">
                            <i data-lucide="download"></i>
                            Exportar Backup Completo
                        </button>
                        <button id="importarBtn" class="btn btn-secondary w-full">
                            <i data-lucide="upload"></i>
                            Importar Backup
                        </button>
                        <input type="file" id="importarDadosInput" class="hidden" accept="application/json">
                        
                        <button id="limparHistoricoBtn" class="btn btn-danger w-full">
                            <i data-lucide="trash-2"></i>
                            Apagar Hist√≥rico Antigo (Requer Senha)
                        </button>
                    </div>
                </div>
            </div>
        </main>

    </div>

    <!-- Modal de Senha -->
    <div id="senhaModal" class="modal" style="display: none;">
        <div class="modal-content !max-w-sm">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                    <i data-lucide="shield-alert" class="h-6 w-6 text-yellow-600"></i>
                </div>
                <h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">Aten√ß√£o!</h3>
                <div class="mt-2 px-2 py-3">
                    <p id="senhaModalMensagem" class="text-sm text-gray-500 mb-4">Uma ou mais comandas est√£o faltando. Digite a senha de administrador para for√ßar o encerramento.</p>
                    <input type="password" id="senhaInput" class="input-field" placeholder="Digite a senha">
                </div>
                <div class="items-center px-4 py-3 gap-2 flex">
                    <button id="cancelarSenhaBtn" class="btn bg-gray-200 text-gray-800 hover:bg-gray-300 w-full">Cancelar</button>
                    <button id="confirmarSenhaBtn" class="btn btn-danger w-full">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- NOVO: Modal de Hist√≥rico de Fiado -->
    <div id="historicoFiadoModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span id="historicoFiadoModalClose" class="modal-close">&times;</span>
            <h2 id="historicoFiadoModalTitulo" class="text-2xl font-bold text-gray-800 mb-4">Hist√≥rico do Cliente</h2>
            <div id="historicoFiadoModalConteudo" class="space-y-2 max-h-96 overflow-y-auto pr-2">
                <!-- Conte√∫do ser√° preenchido via JS -->
            </div>
        </div>
    </div>

    <script type="module">
        // Inicializa os √≠cones
        lucide.createIcons();

        // Elementos da UI
        const vendaForm = document.getElementById('vendaForm');
        const valorVendaInput = document.getElementById('valorVenda');
        const tipoComandaSelect = document.getElementById('tipoComanda'); 
        const numeroComandaInput = document.getElementById('numeroComanda');
        const tipoPagamentoRadios = document.querySelectorAll('input[name="tipoPagamento"]');
        const campoClienteFiado = document.getElementById('campoClienteFiado');
        const nomeClienteFiadoInput = document.getElementById('nomeClienteFiado');
        const telefoneClienteFiadoInput = document.getElementById('telefoneClienteFiado'); 
        const resetarDiaBtn = document.getElementById('resetarDiaBtn');
        const ultimaComandaAInput = document.getElementById('ultimaComandaA'); 
        const ultimaComandaBInput = document.getElementById('ultimaComandaB'); 
        const salvarConfigComandasBtn = document.getElementById('salvarConfigComandasBtn'); 
        const trocoInicialInput = document.getElementById('trocoInicialInput');
        
        // Displays de resumo
        const totalVendasHojeEl = document.getElementById('totalVendasHoje');
        const totalDinheiroEl = document.getElementById('totalDinheiro');
        const totalCartaoEl = document.getElementById('totalCartao');
        const totalPixEl = document.getElementById('totalPix');
        const totalFiadoHojeEl = document.getElementById('totalFiadoHoje');
        const totalPagamentosFiadoHojeEl = document.getElementById('totalPagamentosFiadoHoje');
        const totalCaixaDinheiroEl = document.getElementById('totalCaixaDinheiro');
        
        // Se√ß√£o de Fiado
        const listaClientesFiadoEl = document.getElementById('listaClientesFiado');
        const totalFiadoGeralEl = document.getElementById('totalFiadoGeral');

        // Se√ß√£o de Vendas do Dia
        const listaVendasHojeEl = document.getElementById('listaVendasHoje');
        const comandasRegistradasEl = document.getElementById('comandasRegistradas');


        // Se√ß√£o de Hist√≥rico e Backup
        const seletorData = document.getElementById('seletorData');
        const relatorioContainer = document.getElementById('relatorioContainer');
        const exportarDadosBtn = document.getElementById('exportarDadosBtn');
        const importarBtn = document.getElementById('importarBtn');
        const importarDadosInput = document.getElementById('importarDadosInput');
        const limparHistoricoBtn = document.getElementById('limparHistoricoBtn'); 


        // Modal de Senha
        const senhaModal = document.getElementById('senhaModal');
        const senhaModalMensagem = document.getElementById('senhaModalMensagem');
        const senhaInput = document.getElementById('senhaInput');
        const cancelarSenhaBtn = document.getElementById('cancelarSenhaBtn');
        const confirmarSenhaBtn = document.getElementById('confirmarSenhaBtn');

        // NOVO: Modal de Hist√≥rico Fiado
        const historicoFiadoModal = document.getElementById('historicoFiadoModal');
        const historicoFiadoModalClose = document.getElementById('historicoFiadoModalClose');
        const historicoFiadoModalTitulo = document.getElementById('historicoFiadoModalTitulo');
        const historicoFiadoModalConteudo = document.getElementById('historicoFiadoModalConteudo');


        // --- L√ìGICA DE DADOS ---
        const SENHA_ADMIN = 'admin123';
        let acaoPendenteComSenha = null; // Armazena a fun√ß√£o a ser executada

        const migrarEstruturaFiado = (dadosFiado) => {
            const fiadoMigrado = {};
            for (const chave in dadosFiado) {
                const dados = dadosFiado[chave];
                
                if (dados && typeof dados === 'object') {
                    // Tenta extrair telefone da chave ou do objeto, e limpa
                    const telLimpo = (dados.telefone || (chave.match(/^[0-9() -]+$/) ? chave : '')).replace(/\D/g, '');
                    const chaveMigrada = telLimpo || chave; // Chave prim√°ria agora √© o telefone limpo, se existir

                    if (dados.hasOwnProperty('transacoes')) {
                        // Estrutura j√° √© nova (ou parcialmente nova)
                        fiadoMigrado[chaveMigrada] = {
                            ...dados,
                            telefone: telLimpo // Garante que o telefone esteja salvo e limpo
                        };
                    } else if (dados.hasOwnProperty('divida')) {
                        // Estrutura antiga (Nome: {divida: X}) - migra para transa√ß√£o
                        fiadoMigrado[chaveMigrada] = {
                            nome: dados.nome || (telLimpo ? '(Sem Nome)' : chave),
                            telefone: telLimpo,
                            transacoes: [
                                { 
                                    data: new Date().toISOString(), 
                                    tipo: 'importado', 
                                    valor: dados.divida, 
                                    comanda: 'SALDO ANTERIOR' 
                                }
                            ]
                        };
                    }
                } else if (typeof dados === 'number') {
                    // Estrutura muito antiga (Nome: X)
                    fiadoMigrado[chave] = { // Mant√©m a chave como nome pois n√£o h√° telefone
                        nome: chave, 
                        telefone: '', 
                        transacoes: [
                             { data: new Date().toISOString(), tipo: 'importado', valor: dados, comanda: 'SALDO ANTERIOR' }
                        ]
                    };
                }
            }
            return fiadoMigrado;
        };


        // Carrega os dados do localStorage ou inicializa com valores padr√£o
        let vendasHoje = JSON.parse(localStorage.getItem('vendasHoje')) || [];
        // Migra os dados de fiado na carga inicial
        let clientesFiadoBruto = JSON.parse(localStorage.getItem('clientesFiado')) || {};
        let clientesFiado = migrarEstruturaFiado(clientesFiadoBruto); 
        
        let comandasHoje = JSON.parse(localStorage.getItem('comandasHoje')) || []; 
        let historicoVendas = JSON.parse(localStorage.getItem('historicoVendas')) || {};
        let pagamentosHoje = JSON.parse(localStorage.getItem('pagamentosHoje')) || []; 
        let configComandas = JSON.parse(localStorage.getItem('configComandas')) || { maxA: 0, maxB: 0, trocoInicial: 0 }; 

        // Fun√ß√µes de formata√ß√£o e salvamento
        const formatarMoeda = (valor) => valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        const formatarData = (isoString) => new Date(isoString).toLocaleDateString('pt-BR');
        const formatarDataHora = (isoString) => new Date(isoString).toLocaleString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
        const formatarHora = (isoString) => new Date(isoString).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
        
        // Formata um telefone limpo (s√≥ d√≠gitos) para exibi√ß√£o
        const formatarTelefone = (numero) => {
            if (!numero) return '';
            const numLimpo = String(numero).replace(/\D/g, '');
            
            if (numLimpo.length === 11) {
                // (XX) XXXXX-XXXX
                return `(${numLimpo.substring(0, 2)}) ${numLimpo.substring(2, 7)}-${numLimpo.substring(7)}`;
            }
            if (numLimpo.length === 10) {
                // (XX) XXXX-XXXX
                return `(${numLimpo.substring(0, 2)}) ${numLimpo.substring(2, 6)}-${numLimpo.substring(6)}`;
            }
            return numero; // Retorna o n√∫mero original (ou limpo) se n√£o bater
        };
        
        // Calcula a d√≠vida total de um cliente somando suas transa√ß√µes
        const calcularDividaCliente = (chave) => {
            if (!clientesFiado[chave] || !clientesFiado[chave].transacoes) return 0;
            return clientesFiado[chave].transacoes.reduce((acc, t) => acc + t.valor, 0);
        };

        const salvarDados = () => {
            localStorage.setItem('vendasHoje', JSON.stringify(vendasHoje));
            localStorage.setItem('clientesFiado', JSON.stringify(clientesFiado));
            localStorage.setItem('comandasHoje', JSON.stringify(comandasHoje));
            localStorage.setItem('historicoVendas', JSON.stringify(historicoVendas));
            localStorage.setItem('pagamentosHoje', JSON.stringify(pagamentosHoje)); 
            localStorage.setItem('configComandas', JSON.stringify(configComandas)); 
        };
        
        // Salva o dia atual no hist√≥rico
        const arquivarVendasDoDia = () => {
            if (vendasHoje.length === 0 && pagamentosHoje.length === 0) return; // N√£o arquiva dia vazio
            
            const hoje = new Date();
            const chaveData = `${hoje.getFullYear()}-${String(hoje.getMonth() + 1).padStart(2, '0')}-${String(hoje.getDate()).padStart(2, '0')}`;
            
            const totais = vendasHoje.reduce((acc, venda) => {
                acc[venda.tipo] = (acc[venda.tipo] || 0) + venda.valor;
                return acc;
            }, { 'Dinheiro': 0, 'Cart√£o': 0, 'Pix': 0, 'Fiado': 0 });

            const totalVendas = totais.Dinheiro + totais.Cart√£o + totais.Pix + totais.Fiado;
            
            historicoVendas[chaveData] = {
                data: hoje.toISOString(),
                resumo: { ...totais, total: totalVendas },
                vendas: [...vendasHoje],
                pagamentos: [...pagamentosHoje], 
                trocoInicial: configComandas.trocoInicial, // Salva o troco
                ultimaComanda: { 
                    A: configComandas.maxA,
                    B: configComandas.maxB
                }
            };
        };

        const resetarDadosDoDia = () => {
            arquivarVendasDoDia();
            vendasHoje = [];
            comandasHoje = [];
            pagamentosHoje = []; 
            // Reseta a configura√ß√£o do dia (mant√©m o troco para o dia seguinte se desejar, mas aqui zeramos)
            configComandas = { maxA: 0, maxB: 0, trocoInicial: 0 }; 
            ultimaComandaAInput.value = ''; 
            ultimaComandaBInput.value = ''; 
            trocoInicialInput.value = ''; // Limpa o campo de troco
            salvarDados();
            atualizarUI();
            alert('Dia encerrado e arquivado com sucesso! Novo dia iniciado.');
        }

        const limparHistoricoAntigo = () => {
            if (Object.keys(historicoVendas).length === 0) {
                alert('O hist√≥rico j√° est√° vazio.');
                return;
            }
            historicoVendas = {};
            salvarDados();
            atualizarUI();
            alert('Hist√≥rico de vendas antigo foi permanentemente apagado! (A lista de fiado foi mantida).');
        }

        // Fun√ß√µes de ordena√ß√£o para exibi√ß√£o
        const ordenarComandas = (a, b) => {
            const tipoA = a.charAt(0);
            const tipoB = b.charAt(0);
            const numA = parseInt(a.substring(1));
            const numB = parseInt(b.substring(1));
            
            if (tipoA < tipoB) return -1;
            if (tipoA > tipoB) return 1;
            return numA - numB;
        };

        const ordenarVendasPorComanda = (a, b) => {
            return ordenarComandas(a.comanda, b.comanda);
        };


        // --- L√ìGICA DE RENDERIZA√á√ÉO ---
        
        const renderizarResumoDiario = () => {
            // 1. Calcula totais de vendas
            const totais = vendasHoje.reduce((acc, venda) => {
                acc[venda.tipo] = (acc[venda.tipo] || 0) + venda.valor;
                return acc;
            }, { 'Dinheiro': 0, 'Cart√£o': 0, 'Pix': 0, 'Fiado': 0 });

            const totalVendas = totais.Dinheiro + totais.Cart√£o + totais.Pix + totais.Fiado;

            // 2. Calcula total de pagamentos de fiado recebidos
            const totalPagamentosFiado = pagamentosHoje.reduce((acc, pag) => acc + pag.valor, 0);

            // 3. Calcula a previs√£o de caixa
            const totalDinheiroVendas = totais.Dinheiro;
            const totalDinheiroCaixa = (configComandas.trocoInicial || 0) + totalDinheiroVendas + totalPagamentosFiado; 

            // 4. Atualiza a UI
            totalVendasHojeEl.textContent = formatarMoeda(totalVendas);
            totalDinheiroEl.textContent = formatarMoeda(totalDinheiroVendas);
            totalCartaoEl.textContent = formatarMoeda(totais.Cart√£o);
            totalPixEl.textContent = formatarMoeda(totais.Pix);
            totalFiadoHojeEl.textContent = formatarMoeda(totais.Fiado);
            
            totalPagamentosFiadoHojeEl.textContent = formatarMoeda(totalPagamentosFiado);
            totalCaixaDinheiroEl.textContent = formatarMoeda(totalDinheiroCaixa);
        };

        const renderizarClientesFiado = () => {
            listaClientesFiadoEl.innerHTML = '';
            const chavesClientes = Object.keys(clientesFiado); 
            let totalGeral = 0;
            let clientesAtivos = 0; 

            if (chavesClientes.length === 0) {
                listaClientesFiadoEl.innerHTML = '<p class="text-center text-gray-500 py-4">Nenhum cliente com d√©bito no momento.</p>';
                totalFiadoGeralEl.textContent = formatarMoeda(0);
                return;
            }

            // Ordena clientes pelo nome (ou chave, se n√£o houver nome)
            chavesClientes.sort((a, b) => {
                const nomeA = clientesFiado[a].nome || a;
                const nomeB = clientesFiado[b].nome || b;
                return nomeA.localeCompare(nomeB);
            }).forEach(chave => {
                const dividaObj = clientesFiado[chave];
                
                const dividaValor = calcularDividaCliente(chave);
                totalGeral += dividaValor;

                // N√£o renderiza clientes com d√≠vida zerada ou negativa
                if (dividaValor < 0.01) {
                    return;
                }
                clientesAtivos++;
                
                const clienteDiv = document.createElement('div');
                clienteDiv.className = 'border rounded-lg p-4 space-y-3';
                
                const nomeDisplay = dividaObj.nome || (dividaObj.telefone ? "(Sem Nome)" : chave);
                const telefoneDisplay = formatarTelefone(dividaObj.telefone);

                clienteDiv.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-lg font-semibold text-gray-800">${nomeDisplay}</p>
                            ${telefoneDisplay ? `
                            <div class="flex items-center gap-2 text-sm text-gray-500 mt-1">
                                <i data-lucide="phone" class="w-4 h-4"></i>
                                <span>${telefoneDisplay}</span>
                            </div>` : ''}
                        </div>
                        <div class="text-right">
                            <p class="text-lg font-bold text-red-600 flex-shrink-0">${formatarMoeda(dividaValor)}</p>
                            <!-- Bot√£o de Hist√≥rico -->
                            <button class="btn btn-outline-secondary mt-1 ver-historico-btn" data-cliente-chave="${chave}">
                                <i data-lucide="history" class="w-3 h-3"></i>Ver Hist√≥rico
                            </button>
                        </div>
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="number" step="0.01" class="input-field flex-grow" placeholder="Valor do pagamento">
                        <button class="btn btn-primary text-sm flex-shrink-0 pagar-fiado-btn" data-cliente-chave="${chave}"><i data-lucide="check" class="w-4 h-4"></i>Pagar/Amortizar</button>
                        <button class="btn btn-danger text-sm flex-shrink-0 remover-cliente-btn" data-cliente-chave="${chave}"><i data-lucide="trash-2" class="w-4 h-4"></i>Quitar e Remover</button>
                    </div>`;
                listaClientesFiadoEl.appendChild(clienteDiv);
            });

            if (clientesAtivos === 0) {
                 listaClientesFiadoEl.innerHTML = '<p class="text-center text-gray-500 py-4">Nenhum cliente com d√©bito no momento.</p>';
            }
            
            totalFiadoGeralEl.textContent = formatarMoeda(totalGeral);
        };

        const renderizarVendasDoDia = () => {
            listaVendasHojeEl.innerHTML = '';
            // Exibe a lista de comandas registradas no resumo
            comandasRegistradasEl.textContent = comandasHoje.length > 0 ? [...comandasHoje].sort(ordenarComandas).join(', ') : 'Nenhuma comanda registrada.';

            if (vendasHoje.length === 0) {
                listaVendasHojeEl.innerHTML = '<p class="text-center text-gray-500 py-4">Nenhuma venda registrada ainda.</p>';
                return;
            }
            
            // Renderiza a lista de vendas, ordenada por comanda
            [...vendasHoje].sort(ordenarVendasPorComanda).forEach(venda => {
                // Encontra o √≠ndice original da venda (antes de ordenar) para o bot√£o de remover
                const originalIndex = vendasHoje.findIndex(v => v.transacaoId === venda.transacaoId);
                
                const vendaDiv = document.createElement('div');
                vendaDiv.className = 'flex justify-between items-center p-2 rounded-md even:bg-gray-50';
                
                let tipoPagamentoIcon = '';
                switch(venda.tipo) {
                    case 'Dinheiro': tipoPagamentoIcon = '<i data-lucide="dollar-sign" class="w-4 h-4 text-green-600"></i>'; break;
                    case 'Cart√£o': tipoPagamentoIcon = '<i data-lucide="credit-card" class="w-4 h-4 text-blue-600"></i>'; break;
                    case 'Pix': tipoPagamentoIcon = '<i data-lucide="smartphone" class="w-4 h-4 text-purple-600"></i>'; break;
                    case 'Fiado': tipoPagamentoIcon = '<i data-lucide="book-user" class="w-4 h-4 text-red-600"></i>'; break;
                }

                vendaDiv.innerHTML = `
                    <div class="flex items-center gap-3">
                        <span class="font-bold text-gray-700 w-10 text-center">${venda.comanda}</span>
                        <span class="font-semibold text-gray-800">${formatarMoeda(venda.valor)}</span>
                        <span class="flex items-center gap-1 text-sm text-gray-500">${tipoPagamentoIcon} ${venda.tipo}</span>
                    </div>
                    <button class="btn btn-outline-danger text-xs remover-venda-btn" data-venda-index="${originalIndex}"><i data-lucide="trash-2" class="w-3 h-3"></i>Remover</button>
                    `;
                listaVendasHojeEl.appendChild(vendaDiv);
            });
        };

        const renderizarSeletorHistorico = () => {
            seletorData.innerHTML = '';
            const datasSalvas = Object.keys(historicoVendas).sort().reverse();

            if (datasSalvas.length === 0) {
                seletorData.innerHTML = '<option>Nenhum relat√≥rio salvo</option>';
                relatorioContainer.innerHTML = '<p class="text-center text-gray-500 no-print">Selecione uma data para come√ßar.</p>';
                return;
            }

            seletorData.innerHTML = '<option value="">Selecione uma data</option>';
            datasSalvas.forEach(dataKey => {
                const option = document.createElement('option');
                option.value = dataKey;
                option.textContent = formatarData(historicoVendas[dataKey].data);
                seletorData.appendChild(option);
            });
        };

        // Fun√ß√£o para exibir o relat√≥rio de um dia espec√≠fico
        const mostrarRelatorio = (dataKey) => {
            if (!dataKey || !historicoVendas[dataKey]) {
                relatorioContainer.innerHTML = '<p class="text-center text-gray-500 no-print">Selecione uma data para come√ßar.</p>';
                return;
            }

            const relatorio = historicoVendas[dataKey];
            const { resumo, vendas, pagamentos, trocoInicial } = relatorio; 
            
            // Gera HTML para lista de vendas
            let vendasHtml = vendas.sort(ordenarVendasPorComanda).map(venda => {
                let clienteDisplay = '';
                if (venda.tipo === 'Fiado') {
                    const telFormatado = formatarTelefone(venda.clienteTelefone);
                    if (venda.clienteNome) {
                        clienteDisplay = `(${venda.clienteNome} / ${telFormatado})`;
                    } else {
                        clienteDisplay = `(${telFormatado})`;
                    }
                }

                return `
                <li class="flex justify-between items-center p-2 even:bg-gray-50">
                    <span>Comanda <strong>#${venda.comanda}</strong></span>
                    <span class="font-semibold">${formatarMoeda(venda.valor)}</span>
                    <span class="text-sm text-gray-600">${venda.tipo} ${clienteDisplay}</span>
                </li>
            `}).join('');
            if (vendas.length === 0) {
                vendasHtml = '<li class="text-center text-gray-500 p-2">Nenhuma venda registrada.</li>';
            }

            // Gera HTML para lista de pagamentos
            let pagamentosHtml = '';
            let totalPagamentos = 0;
            if (pagamentos && pagamentos.length > 0) {
                pagamentos.sort((a, b) => new Date(a.data) - new Date(b.data)); // Ordena pagamentos por hora

                pagamentosHtml = pagamentos.map(pag => {
                    totalPagamentos += pag.valor;
                    const telFormatado = pag.telefone ? `(${formatarTelefone(pag.telefone)})` : '';
                    const horaPagamento = formatarHora(pag.data);

                    return `
                    <li class="flex justify-between items-center p-2 even:bg-gray-50">
                        <div>
                            <span><strong class="text-gray-800">${pag.cliente}</strong> ${telFormatado}</span>
                            <span class="text-xs text-gray-500 block">√†s ${horaPagamento}</span>
                        </div>
                        <span class="font-semibold text-green-600">${formatarMoeda(pag.valor)}</span>
                    </li>
                `;
                }).join('');
            } else {
                pagamentosHtml = '<li class="text-center text-gray-500 p-2">Nenhum pagamento recebido.</li>';
            }
            
            // Calcula o total em dinheiro para o relat√≥rio
            const totalDinheiroRelatorio = (trocoInicial || 0) + resumo.Dinheiro + totalPagamentos;

            // HTML do Relat√≥rio atualizado
            relatorioContainer.innerHTML = `
                <div class="space-y-3">
                    <h3 class="text-xl font-bold text-gray-800">Relat√≥rio de ${formatarData(relatorio.data)}</h3>
                    
                    <!-- Resumo Geral de Vendas -->
                    <div class="space-y-2 border-t pt-2">
                        <div class="flex justify-between font-bold text-blue-600"><p>Venda Total (Bruta):</p><p>${formatarMoeda(resumo.total)}</p></div>
                        <div class="flex justify-between text-sm text-gray-700"><p>Valor Inicial (Troco):</p><p>${formatarMoeda(trocoInicial || 0)}</p></div>
                        <div class="flex justify-between text-sm"><p>Dinheiro:</p><p>${formatarMoeda(resumo.Dinheiro)}</p></div>
                        <div class="flex justify-between text-sm"><p>Cart√£o:</p><p>${formatarMoeda(resumo.Cart√£o)}</p></div>
                        <div class="flex justify-between text-sm"><p>Pix:</p><p>${formatarMoeda(resumo.Pix)}</p></div>
                        <div class="flex justify-between text-sm text-red-600"><p>Fiado (Novas Vendas):</p><p>${formatarMoeda(resumo.Fiado)}</p></div>
                    </div>

                    <!-- Resumo de Pagamentos -->
                    <div class="space-y-2 border-t pt-2">
                        <div class="flex justify-between font-bold text-green-600"><p>Pagamentos de Fiado Recebidos:</p><p>${formatarMoeda(totalPagamentos)}</p></div>
                    </div>
                    
                    <div class="space-y-2 border-t pt-2 bg-blue-50 p-2 rounded">
                        <div class="flex justify-between font-bold text-blue-700"><p>Total em Dinheiro (Final):</p><p>${formatarMoeda(totalDinheiroRelatorio)}</p></div>
                        <p class="text-xs text-blue-600">(Valor Inicial + Vendas em Dinheiro + Pagamentos Recebidos)</p>
                    </div>

                    <!-- Detalhes Vendas -->
                    <div class="border-t pt-2">
                        <h4 class="font-semibold mb-2">Detalhes das Vendas (${vendas.length} registros):</h4>
                        <ul class="space-y-1 max-h-40 overflow-y-auto pr-2">${vendasHtml}</ul>
                    </div>

                    <!-- Detalhes Pagamentos -->
                    <div class="border-t pt-2">
                        <h4 class="font-semibold mb-2">Detalhes dos Pagamentos (${pagamentos ? pagamentos.length : 0} registros):</h4>
                        <ul class="space-y-1 max-h-40 overflow-y-auto pr-2">${pagamentosHtml}</ul>
                    </div>

                    <button id="imprimirBtn" class="btn btn-success w-full mt-4 no-print"><i data-lucide="printer"></i>Imprimir Relat√≥rio</button>
                </div>
            `;
            lucide.createIcons();
        };
        
        // Mostra o modal de extrato de um cliente
        const mostrarHistoricoFiado = (chaveCliente) => {
            const cliente = clientesFiado[chaveCliente];
            if (!cliente) return;
            
            const nomeDisplay = cliente.nome || formatarTelefone(cliente.telefone) || chaveCliente;
            historicoFiadoModalTitulo.textContent = `Hist√≥rico de: ${nomeDisplay}`;
            
            historicoFiadoModalConteudo.innerHTML = ''; 
            
            let saldoCorrente = 0;
            const transacoesHtml = cliente.transacoes
                .sort((a, b) => new Date(a.data) - new Date(b.data)) // Ordena transa√ß√µes por data
                .map(t => {
                    saldoCorrente += t.valor;
                    
                    let descricao = '';
                    let valorClasse = '';
                    
                    if (t.tipo === 'compra') {
                        descricao = `Compra (Comanda #${t.comanda})`;
                        valorClasse = 'text-red-600';
                    } else if (t.tipo === 'pagamento') {
                        descricao = 'Pagamento';
                        valorClasse = 'text-green-600';
                    } else if (t.tipo === 'importado') {
                        descricao = 'Saldo Anterior (Importado)';
                        valorClasse = 'text-gray-600';
                    }
                    
                    return `
                    <li class="flex justify-between items-center p-3 border-b">
                        <div>
                            <p class="font-semibold">${descricao}</p>
                            <p class="text-sm text-gray-500">${formatarDataHora(t.data)}</p>
                        </div>
                        <div class="text-right">
                            <p class="font-bold ${valorClasse}">${formatarMoeda(t.valor)}</p>
                            <p class="text-sm text-gray-600">Saldo: ${formatarMoeda(saldoCorrente)}</p>
                        </div>
                    </li>
                    `;
                }).join('');
                
            historicoFiadoModalConteudo.innerHTML = `<ul class="space-y-1">${transacoesHtml}</ul>`;
            
            historicoFiadoModal.style.display = 'flex';
            lucide.createIcons(); // Recria √≠cones se houver algum no modal (n√£o h√°, mas √© boa pr√°tica)
        };

        // Fun√ß√£o central que atualiza todos os elementos visuais
        const atualizarUI = () => {
            renderizarResumoDiario();
            renderizarClientesFiado();
            renderizarVendasDoDia();
            renderizarSeletorHistorico();
            
            // Recarrega os valores salvos de configura√ß√£o nos inputs
            trocoInicialInput.value = configComandas.trocoInicial > 0 ? configComandas.trocoInicial : '';
            ultimaComandaAInput.value = configComandas.maxA > 0 ? configComandas.maxA : '';
            ultimaComandaBInput.value = configComandas.maxB > 0 ? configComandas.maxB : '';
            
            lucide.createIcons();
        };

        // --- L√ìGICA DE EVENTOS ---
        
        // Evento de envio do formul√°rio de Venda
        vendaForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const valor = parseFloat(valorVendaInput.value);
            const tipoComanda = tipoComandaSelect.value; 
            const numeroComanda = parseInt(numeroComandaInput.value); 
            const tipoPagamento = document.querySelector('input[name="tipoPagamento"]:checked').value;
            
            const comandaId = tipoComanda + numeroComanda; 
            const transacaoId = new Date().toISOString(); // ID √∫nico para a transa√ß√£o

            // Valida√ß√µes
            if (isNaN(valor) || valor <= 0) { alert('Por favor, insira um valor de venda v√°lido.'); return; }
            if (isNaN(numeroComanda) || numeroComanda <= 0) { alert('Por favor, insira um n√∫mero de comanda v√°lido.'); return; }
            if(comandasHoje.includes(comandaId)) { alert(`A comanda de n√∫mero ${comandaId} j√° foi registrada hoje.`); return; } 

            const novaVenda = { 
                comanda: comandaId, 
                valor, 
                tipo: tipoPagamento, 
                data: transacaoId, 
                transacaoId: transacaoId // ID para rastrear remo√ß√µes
            }; 

            if (tipoPagamento === 'Fiado') {
                const nomeCliente = nomeClienteFiadoInput.value.trim();
                const telefoneClienteBruto = telefoneClienteFiadoInput.value.trim();
                const telefoneCliente = telefoneClienteBruto.replace(/\D/g, ''); // Limpa o telefone
                
                if (!telefoneCliente) { 
                    alert('Por favor, insira um telefone do cliente (obrigat√≥rio).'); 
                    telefoneClienteFiadoInput.focus();
                    return; 
                }
                
                const chaveCliente = telefoneCliente; // Telefone limpo √© a chave
                
                novaVenda.clienteNome = nomeCliente;
                novaVenda.clienteTelefone = telefoneCliente; 
                
                // Cria o cliente se n√£o existir
                if (!clientesFiado[chaveCliente]) {
                    clientesFiado[chaveCliente] = { nome: nomeCliente, telefone: telefoneCliente, transacoes: [] };
                }
                // Atualiza o nome se um novo for fornecido (ou se for o primeiro)
                if (nomeCliente) {
                    clientesFiado[chaveCliente].nome = nomeCliente;
                }
                // Adiciona a transa√ß√£o de compra
                clientesFiado[chaveCliente].transacoes.push({
                    data: transacaoId,
                    tipo: 'compra',
                    valor: valor, 
                    comanda: comandaId,
                    transacaoId: transacaoId // Vincula a transa√ß√£o √† venda
                });
            }
            
            vendasHoje.push(novaVenda);
            comandasHoje.push(comandaId); 
            salvarDados();
            atualizarUI();

            // Reseta o formul√°rio
            vendaForm.reset();
            campoClienteFiado.classList.add('hidden');
            nomeClienteFiadoInput.required = false;
            telefoneClienteFiadoInput.required = false;
            numeroComandaInput.focus();
        });
        
        // Exibe/oculta campos de fiado
        tipoPagamentoRadios.forEach(radio => radio.addEventListener('change', () => {
            campoClienteFiado.classList.toggle('hidden', radio.value !== 'Fiado');
            nomeClienteFiadoInput.required = false; // Nome nunca √© obrigat√≥rio
            telefoneClienteFiadoInput.required = (radio.value === 'Fiado');
        }));

        // Eventos na lista de clientes (Pagar, Quitar, Hist√≥rico)
        listaClientesFiadoEl.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;
            const clienteChave = target.dataset.clienteChave; 

            // Bot√£o "Ver Hist√≥rico"
            if (target.classList.contains('ver-historico-btn')) {
                mostrarHistoricoFiado(clienteChave);
                return;
            }

            // Bot√£o "Pagar/Amortizar"
            if (target.classList.contains('pagar-fiado-btn')) {
                const inputValor = target.parentElement.querySelector('input');
                const valorPago = parseFloat(inputValor.value);
                if (isNaN(valorPago) || valorPago <= 0) { alert('Valor de pagamento inv√°lido.'); return; }
                
                const nomeParaRelatorio = clientesFiado[clienteChave].nome || clienteChave;
                const telefoneCliente = clientesFiado[clienteChave].telefone || (clienteChave.match(/^[0-9() -]+$/) ? clienteChave : '');
                const dataPagamento = new Date().toISOString();

                // Adiciona ao relat√≥rio de pagamentos do dia
                pagamentosHoje.push({
                    cliente: nomeParaRelatorio,
                    telefone: telefoneCliente,
                    valor: valorPago,
                    data: dataPagamento
                });

                // Adiciona a transa√ß√£o de pagamento (valor negativo) ao cliente
                clientesFiado[clienteChave].transacoes.push({
                    data: dataPagamento,
                    tipo: 'pagamento',
                    valor: -valorPago 
                });
                
                salvarDados(); 
                atualizarUI();
                inputValor.value = ''; 

            // Bot√£o "Quitar e Remover"
            } else if (target.classList.contains('remover-cliente-btn')) {
                const nomeParaRelatorio = clientesFiado[clienteChave].nome || clienteChave;
                
                const valorQuitado = calcularDividaCliente(clienteChave);

                if (valorQuitado < 0.01) {
                    alert('Este cliente n√£o possui d√≠vidas para quitar.');
                    return;
                }

                if (confirm(`Tem certeza que deseja quitar a d√≠vida de ${formatarMoeda(valorQuitado)} para "${nomeParaRelatorio}"?`)) {
                    
                    const telefoneCliente = clientesFiado[clienteChave].telefone || (clienteChave.match(/^[0-9() -]+$/) ? clienteChave : '');
                    const dataPagamento = new Date().toISOString();
                    
                    // Adiciona o pagamento total ao relat√≥rio do dia
                    pagamentosHoje.push({
                        cliente: nomeParaRelatorio,
                        telefone: telefoneCliente, 
                        valor: valorQuitado, 
                        data: dataPagamento
                    });

                    // Adiciona a transa√ß√£o final de quita√ß√£o
                    clientesFiado[clienteChave].transacoes.push({
                        data: dataPagamento,
                        tipo: 'pagamento',
                        valor: -valorQuitado 
                    });
                    
                    salvarDados();
                    atualizarUI(); // Cliente sumir√° da lista pois a d√≠vida √© 0
                }
            }
        });

        // Evento na lista de vendas (Remover)
        listaVendasHojeEl.addEventListener('click', (e) => {
            const target = e.target.closest('.remover-venda-btn');
            if (!target) return;

            const index = parseInt(target.dataset.vendaIndex);
            const vendaParaRemover = vendasHoje[index];

            if (confirm(`Remover a venda da comanda N¬∫ ${vendaParaRemover.comanda}?`)) {
                
                // Se for fiado, remove a transa√ß√£o de compra do cliente
                if (vendaParaRemover.tipo === 'Fiado' && vendaParaRemover.clienteTelefone) {
                    const clienteChave = vendaParaRemover.clienteTelefone; 
                    if (clientesFiado[clienteChave] && clientesFiado[clienteChave].transacoes) {
                        // Filtra a transa√ß√£o baseada no ID √∫nico
                        clientesFiado[clienteChave].transacoes = clientesFiado[clienteChave].transacoes.filter(
                            t => t.transacaoId !== vendaParaRemover.transacaoId
                        );
                    }
                }

                // Remove a comanda da lista do dia
                comandasHoje = comandasHoje.filter(c => c !== vendaParaRemover.comanda); 
                // Remove a venda da lista do dia
                vendasHoje.splice(index, 1);
                salvarDados();
                atualizarUI();
            }
        });
        
        // Mudar data do seletor de hist√≥rico
        seletorData.addEventListener('change', (e) => mostrarRelatorio(e.target.value));

        // Imprimir relat√≥rio
        relatorioContainer.addEventListener('click', (e) => {
            const target = e.target.closest('#imprimirBtn');
            if (target) window.print();
        });

        // Salvar configura√ß√£o do dia (Totais e Troco)
        salvarConfigComandasBtn.addEventListener('click', () => {
            configComandas.maxA = parseInt(ultimaComandaAInput.value) || 0;
            configComandas.maxB = parseInt(ultimaComandaBInput.value) || 0;
            configComandas.trocoInicial = parseFloat(trocoInicialInput.value) || 0;
            salvarDados();
            alert('Totais de comandas e valor inicial salvos para o dia!');
            atualizarUI(); // Atualiza a previs√£o do caixa imediatamente
        });

        // Verificar e Encerrar Dia
        resetarDiaBtn.addEventListener('click', () => {
            if (vendasHoje.length === 0 && pagamentosHoje.length === 0) {
                if(confirm('Nenhuma venda ou pagamento registrado. Deseja iniciar um novo dia mesmo assim?')) resetarDadosDoDia();
                return;
            }
            
            const totalEsperadoA = configComandas.maxA; 
            const totalEsperadoB = configComandas.maxB; 

            // Conta quantas comandas de cada tipo foram registradas
            const totalRegistradoA = comandasHoje.filter(c => c.startsWith('A')).length; 
            const totalRegistradoB = comandasHoje.filter(c => c.startsWith('B')).length; 

            // Valida√ß√£o de seguran√ßa: se registrou comandas mas n√£o configurou o total
            if ((totalRegistradoA > 0 && totalEsperadoA === 0) || (totalRegistradoB > 0 && totalEsperadoB === 0)) {
                 alert('Voc√™ registrou comandas, mas n√£o salvou os totais esperados (A e B). Por favor, defina os totais e clique em "Salvar Totais do Dia" antes de encerrar.');
                 ultimaComandaAInput.focus();
                 return;
            }
            
            const diferencaA = totalEsperadoA - totalRegistradoA; // Positivo = falta, Negativo = sobra
            const diferencaB = totalEsperadoB - totalRegistradoB; 

            let mensagensErro = [];
            if (diferencaA > 0) {
                mensagensErro.push(`Faltam ${diferencaA} comanda(s) Amarela(s)`);
            } else if (diferencaA < 0) { 
                mensagensErro.push(`Existem ${-diferencaA} comanda(s) Amarela(s) a mais`);
            }
            
            if (diferencaB > 0) {
                mensagensErro.push(`Faltam ${diferencaB} comanda(s) Branca(s)`);
            } else if (diferencaB < 0) {
                mensagensErro.push(`Existem ${-diferencaB} comanda(s) Branca(s) a mais`);
            }

            // Se houver qualquer discrep√¢ncia, pede senha
            if (mensagensErro.length > 0) {
                senhaModalMensagem.textContent = `A contagem de comandas n√£o bate com o total configurado: ${mensagensErro.join(', ')}. Digite a senha para for√ßar o encerramento.`;
                acaoPendenteComSenha = resetarDadosDoDia; 
                senhaModal.style.display = 'flex';
                senhaInput.focus();
            } else {
                // Se tudo bater, apenas confirma
                if(confirm('A contagem de comandas (baseado no total configurado) est√° correta. Deseja encerrar e arquivar o dia?')) resetarDadosDoDia();
            }
        });
        
        // Eventos do Modal de Senha
        cancelarSenhaBtn.addEventListener('click', () => {
            senhaModal.style.display = 'none';
            acaoPendenteComSenha = null; 
            senhaInput.value = ''; 
        });

        confirmarSenhaBtn.addEventListener('click', () => {
            if (senhaInput.value === SENHA_ADMIN) {
                senhaModal.style.display = 'none';
                senhaInput.value = '';
                if (typeof acaoPendenteComSenha === 'function') {
                    acaoPendenteComSenha(); 
                }
                acaoPendenteComSenha = null; 
            } else {
                alert('Senha incorreta!');
            }
        });

        // Eventos do Modal de Hist√≥rico Fiado
        historicoFiadoModalClose.addEventListener('click', () => {
            historicoFiadoModal.style.display = 'none';
        });
        
        // Eventos de Backup/Restaura√ß√£o
        exportarDadosBtn.addEventListener('click', () => {
            const backupData = {
                historico: historicoVendas,
                fiado: clientesFiado
            };
            
            if (Object.keys(historicoVendas).length === 0 && Object.keys(clientesFiado).length === 0) {
                alert('N√£o h√° dados para exportar.');
                return;
            }
            
            const dataStr = JSON.stringify(backupData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = 'backup_pensao_completo.json';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            alert('Backup exportado com sucesso!');
        });
        
        importarBtn.addEventListener('click', () => {
            importarDadosInput.click();
        });

        importarDadosInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const dadosImportados = JSON.parse(event.target.result);
                    
                    if (dadosImportados && typeof dadosImportados === 'object' && dadosImportados.hasOwnProperty('historico') && dadosImportados.hasOwnProperty('fiado')) {
                        if (confirm('Deseja substituir o hist√≥rico e a lista de fiado por este backup? (Os dados do dia atual n√£o ser√£o afetados)')) {
                            historicoVendas = dadosImportados.historico || {};
                            clientesFiado = migrarEstruturaFiado(dadosImportados.fiado || {});
                            salvarDados();
                            atualizarUI();
                            alert('Backup importado com sucesso!');
                        }
                    } else {
                        alert('Arquivo de backup inv√°lido ou corrompido.');
                    }
                } catch (error) {
                    console.error('Erro ao importar backup:', error);
                    alert('Ocorreu um erro ao ler o arquivo de backup.');
                } finally {
                    e.target.value = null; // Limpa o input para permitir reimportar o mesmo arquivo
                }
            };
            reader.readAsText(file);
        });

        // Limpar Hist√≥rico Antigo (com senha)
        limparHistoricoBtn.addEventListener('click', () => {
            senhaModalMensagem.innerHTML = '<strong>Aten√ß√£o!</strong> Esta a√ß√£o vai apagar <strong>PERMANENTEMENTE</strong> todo o hist√≥rico de relat√≥rios salvos.<br><br>Recomenda-se exportar um backup primeiro. Digite a senha para confirmar.';
            acaoPendenteComSenha = limparHistoricoAntigo; 
            senhaModal.style.display = 'flex';
            senhaInput.focus();
        });

        // Inicializa√ß√£o da aplica√ß√£o
        document.addEventListener('DOMContentLoaded', () => {
            // Garante que os dados migrados sejam salvos na primeira carga
            salvarDados();
            atualizarUI();

            // Fecha modais ao clicar fora
            window.addEventListener('click', (event) => {
                if (event.target == senhaModal) {
                    senhaModal.style.display = 'none';
                    acaoPendenteComSenha = null; 
                    senhaInput.value = ''; 
                }
                if (event.target == historicoFiadoModal) {
                    historicoFiadoModal.style.display = 'none';
                }
            });
        });
    </script>

</body>
</html>

